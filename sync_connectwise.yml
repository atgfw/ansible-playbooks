---
# Playbook: sync_connectwise_minimal.yml
# Purpose: **Clean, minimal** version that only **creates** a ConnectWise
#          Configuration for each host (no update path yet). Simpler Jinja,
#          no merge‑keys, no multiline concatenations.
#
# How it works
# 1. Reads CW auth from four env vars.
# 2. Gets Company by **identifier** (tag `company:<IDENT>`).
# 3. Builds a small payload with core facts + custom fields.
# 4. POSTs to /company/configurations.
#
# Once this runs successfully, we can add PATCH logic.
# ----------------------------------------------------

- name: Create ConnectWise Configuration (minimal)
  hosts: all
  gather_facts: yes

  vars:
    cw_base_url: "https://api-na.myconnectwise.net/v4_6_release/apis/3.0"

    # Auth – *must* be set in environment or inventory vars
    cw_company_id: "{{ lookup('env','CW_COMPANY_ID') }}"
    cw_public_key: "{{ lookup('env','CW_PUBLIC_KEY') }}"
    cw_private_key: "{{ lookup('env','CW_PRIVATE_KEY') }}"
    cw_client_id:  "{{ lookup('env','CW_CLIENT_ID') }}"

    # Fixed IDs (hard‑code or pass via --extra-vars)
    cw_config_type_name: "Droplet"   # use name; CW will resolve it
    cw_status_id: 5                  # e.g. Active status

  tasks:

    ###################################################################
    # 1. Sanity checks
    ###################################################################

    - name: Abort if any CW credential is missing
      fail:
        msg: "CW credentials missing (COMPANY_ID, PUBLIC_KEY, PRIVATE_KEY, CLIENT_ID)."
      when: cw_company_id == '' or cw_public_key == '' or cw_private_key == '' or cw_client_id == ''

    - name: Extract company identifier from tag (company:<IDENT>)
      set_fact:
        cw_company_ident: >-
          {{ (do_tags | default([]) | select('match','^company:') | map('regex_replace','^company:','') | list | first | default('')) }}

    - name: Abort if no company identifier tag found
      fail:
        msg: "Droplet lacks 'company:<IDENT>' tag."
      when: cw_company_ident == ''

    - name: Compute basic facts
      set_fact:
        cw_device_uuid: "{{ ansible_product_uuid | default(ansible_machine_id | default(inventory_hostname)) }}"
        cw_auth_header: "Basic {{ (cw_company_id ~ '+' ~ cw_public_key ~ ':' ~ cw_private_key)|b64encode }}"

    ###################################################################
    # 2. Lookup Company ID by identifier
    ###################################################################

    - name: Get CW Company by identifier
      uri:
        url: "{{ cw_base_url }}/company/companies?conditions=identifier='{{ cw_company_ident }}'"
        method: GET
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Accept: "application/json"
        return_content: yes
        validate_certs: yes
      register: cw_company

    - name: Abort if company not found
      fail:
        msg: "Company identifier '{{ cw_company_ident }}' not found in ConnectWise."
      when: cw_company.json | length == 0

    - name: Set company ID fact
      set_fact:
        cw_company_id_num: "{{ cw_company.json[0].id }}"

    ###################################################################
    ###################################################################
    # 3. Check if configuration already exists (by deviceIdentifier)
    ###################################################################

    - name: Search for existing configuration by deviceIdentifier
      uri:
        url: "{{ cw_base_url }}/company/configurations?conditions=deviceIdentifier='{{ cw_device_uuid }}'"
        method: GET
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Accept: "application/json"
        return_content: yes
        validate_certs: yes
      register: cw_search

    ###################################################################
    # 4. Build payload (simple dict)
    ###################################################################

    - name: Build configuration payload
      set_fact:
        cw_payload: >-
          {{ {
            'name': inventory_hostname,
            'deviceIdentifier': cw_device_uuid,
            'type': ( cw_search.json|length > 0 and cw_search.json[0].type is defined )
                     | ternary({ 'id': cw_search.json[0].type.id, 'name': cw_search.json[0].type.name },
                              { 'name': cw_config_type_name }),
            'status': { 'id': cw_status_id },
            'company': { 'id': cw_company_id_num },
            'ipAddress': ansible_default_ipv4.address | default(''),
            'notes': 'Auto-generated ' ~ ansible_date_time.iso8601,
            'customFields': [
              { 'caption': 'Droplet ID', 'value': do_id | default('') },
              { 'caption': 'DO Region',  'value': do_region.slug | default('') },
              { 'caption': 'DO Size',    'value': do_size.slug | default('') },
              { 'caption': 'DO Tags',    'value': (do_tags | join(', ') if do_tags is defined else '') },
              { 'caption': 'Private IP', 'value': (do_networks.v4 | selectattr('type','equalto','private') | map(attribute='ip_address') | list | first) | default('') }
            ]
          } }}

    ###################################################################
    # 5. Create OR Update
    ################################################################### (by deviceIdentifier)
    ###################################################################

    - name: Search for existing configuration by deviceIdentifier
      uri:
        url: "{{ cw_base_url }}/company/configurations?conditions=deviceIdentifier='{{ cw_device_uuid }}'"
        method: GET
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Accept: "application/json"
        return_content: yes
        validate_certs: yes
      register: cw_search

    ###################################################################
    # 5. Create OR Update
    ###################################################################

    - name: Create configuration (when absent)
      when: cw_search.json | length == 0
      uri:
        url: "{{ cw_base_url }}/company/configurations"
        method: POST
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Content-Type: "application/json"
        body: "{{ cw_payload }}"
        body_format: json
        status_code: 201
        return_content: yes
        validate_certs: yes
      register: cw_result

    - name: Update configuration when present
      when: cw_search.json | length > 0
      uri:
        url: "{{ cw_base_url }}/company/configurations/{{ cw_search.json[0].id }}"
        method: PUT
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Content-Type: "application/json"
        body: "{{ cw_payload }}"
        body_format: json
        status_code: 200
        return_content: yes
        validate_certs: yes
      register: cw_result

    - name: Show CW response for create/update
      debug:
        var: cw_result.json
      debug:
        var: cw_result.json
