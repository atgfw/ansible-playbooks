---
# Playbook: sync_connectwise.yml
# Purpose: Create or update a ConnectWise Manage "Configuration" record for
#          each DigitalOcean Droplet, using facts gathered at runtime.
#
# Highlights (v10)
# ──────────────────
# • **YAML‑safe notes string** – The notes field is now a multiline scalar
#   (`|`) that embeds inline Jinja, eliminating the quote‑balancing errors.
# • Removed accidental duplicate lines in previous payload.
#
- name: Sync host facts to ConnectWise Manage configuration
  hosts: all
  gather_facts: yes

  vars:
    cw_base_url: "https://api-na.myconnectwise.net/v4_6_release/apis/3.0"

    cw_company_id: "{{ lookup('env','CW_COMPANY_ID') }}"
    cw_public_key: "{{ lookup('env','CW_PUBLIC_KEY') }}"
    cw_private_key: "{{ lookup('env','CW_PRIVATE_KEY') }}"
    cw_client_id:  "{{ lookup('env','CW_CLIENT_ID') }}"

    cw_default_company_tag: ""
    cw_location_id: ""

    cw_config_type_name: "Droplet"
    cw_config_type_id: ""
    cw_status_id: 5

  tasks:

    # 1) Validation ------------------------------------------------------

    - name: Ensure CW_CLIENT_ID env var is present
      when: cw_client_id | length == 0
      fail:
        msg: "CW_CLIENT_ID env var required."

    - name: Extract company tag
      set_fact:
        cw_company_tag_value: >-
          {{ (do_tags | default([]) | select('match','^company:') | list | first | default(cw_default_company_tag))
             | regex_replace('^company:','') }}

    - name: Fail if company tag missing
      when: cw_company_tag_value | length == 0
      fail:
        msg: "No company tag and no default."

    - name: Build auth header
      set_fact:
        cw_auth_header: "Basic {{ (cw_company_id ~ '+' ~ cw_public_key ~ ':' ~ cw_private_key)|b64encode }}"

    # 2) Resolve company -----------------------------------------------

    - name: Lookup company by identifier
      uri:
        url: "{{ cw_base_url }}/company/companies?conditions=identifier='{{ cw_company_tag_value }}'"
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Accept: "application/json"
        method: GET
        validate_certs: yes
        return_content: yes
      register: cw_company_lookup_id

    - name: Lookup company by name LIKE if needed
      when: cw_company_lookup_id.json | length == 0
      uri:
        url: "{{ cw_base_url }}/company/companies?conditions=name like '%{{ cw_company_tag_value }}%'"
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Accept: "application/json"
        method: GET
        validate_certs: yes
        return_content: yes
      register: cw_company_lookup_name

    - name: Set company id fact
      set_fact:
        cw_company_target_id: >-
          {{ (cw_company_lookup_id.json | length > 0) | ternary(cw_company_lookup_id.json[0].id, cw_company_lookup_name.json[0].id | default(None)) }}

    - name: Fail if company not resolved
      when: cw_company_target_id is not defined
      fail:
        msg: "Company '{{ cw_company_tag_value }}' not found in CW."

    # 3) Helper facts ----------------------------------------------------

    - name: Compute safe helper values
      set_fact:
        cw_device_uuid: >-
          {{ do_id | default(ansible_product_uuid | default(ansible_machine_id | default(inventory_hostname))) }}
        safe_region: "{{ do_region.slug | default('') }}"
        safe_public_ip: >-
          {{ (do_networks.v4 | selectattr('type','equalto','public') | list | first).ip_address
             if (do_networks is defined and (do_networks.v4 | default([])) | length > 0) else (ansible_host | default('')) }}
        safe_mac: >-
          {{ (ansible_default_ipv4.macaddress if (ansible_default_ipv4 is defined and 'macaddress' in ansible_default_ipv4) else '') }}
        safe_private_ip: >-
          {{ (do_networks.v4 | selectattr('type','equalto','private') | list | first).ip_address
             if (do_networks is defined and (do_networks.v4 | default([])) | length > 0) else '' }}
        safe_size: "{{ do_size.slug | default('') }}"

    - name: Query existing configuration
      uri:
        url: "{{ cw_base_url }}/company/configurations?conditions=deviceIdentifier='{{ cw_device_uuid }}'"
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Accept: "application/json"
        method: GET
        validate_certs: yes
        return_content: yes
      register: cw_lookup

    # 4) Relationship dict ----------------------------------------------

    - name: Build relationship dict
      set_fact:
        cw_relationships: >-
          {{
            {
              'configurationStatus': { 'id': cw_status_id | int },
              'company': { 'id': cw_company_target_id | int },
              'configurationType': (
                cw_config_type_name | length > 0
                and { 'name': cw_config_type_name }
                or { 'id': cw_config_type_id | int }
              )
            }
            | combine( (cw_location_id | length > 0)
                | ternary({ 'location': { 'id': cw_location_id | int } }, {}) )
          }}

    # 5) Payload ---------------------------------------------------------

    - name: Build notes string (multiline, Jinja-safe)
      set_fact:
        cw_notes: |
          Auto-generated by Ansible
          Region: {{ safe_region }}
          CPU: {{ do_vcpus | default('?') }} vCPUs
          RAM: {{ (do_memory | default(0) // 1024) }} GB
          Disk: {{ do_disk | default('?') }} GB
          Tags: {{ do_tags | default([]) | join(', ') }}
          OS Image: {{ do_image.description | default('') }}
          Updated: {{ ansible_date_time.iso8601 }}

    - name: Assemble payload (pure YAML, no giant Jinja)
      set_fact:
        cw_payload:
          <<: "{{ cw_relationships }}"   # merge relationships
          name: "{{ do_name | default(ansible_hostname) }}"
          deviceIdentifier: "{{ cw_device_uuid }}"
          manufacturer: "DigitalOcean"
          modelNumber: "{{ safe_size }}"
          serialNumber: "{{ do_id | default('') }}"
          coreCount: {{ do_vcpus | default(0) }}
          ram: {{ do_memory | default(0) }}
          hardDrive: {{ do_disk | default(0) }}
          osType: "{{ distro | default(ansible_distribution) }}"
          osInfo: "{{ do_image.description | default('') }}"
          ipAddress: "{{ safe_public_ip }}"
          macAddress: "{{ safe_mac }}"
          networkName: "{{ do_name | default(ansible_hostname) }}"
          customFields:
            - caption: "Droplet ID"
              value: "{{ do_id | default('') }}"
            - caption: "DO Region"
              value: "{{ safe_region }}"
            - caption: "DO Size"
              value: "{{ safe_size }}"
            - caption: "DO Tags"
              value: "{{ do_tags | join(', ') if do_tags is defined else '' }}"
            - caption: "Private IP"
              value: "{{ safe_private_ip }}"
          notes: "{{ cw_notes }}"

    # 6) Create or update ----------------------------------------------- ----------------------------------------------- ----------------------------------------------- ----------------------------------------------- -----------------------------------------------

    - name: Create configuration when absent
      when: cw_lookup.json | length == 0
      uri:
        url: "{{ cw_base_url }}/company/configurations"
        method: POST
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Content-Type: "application/json"
        body: "{{ cw_payload }}"
        body_format: json
        status_code: 201
        validate_certs: yes
        return_content: yes
      register: cw_create

    - name: Update configuration when present
      when: cw_lookup.json | length > 0
      uri:
        url: "{{ cw_base_url }}/company/configurations/{{ cw_lookup.json[0].id }}"
        method: PATCH
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Content-Type: "application/json"
        body: "{{ cw_payload }}"
        body_format: json
        status_code: 200
        validate_certs: yes
        return_content: yes
      register: cw_update

    - name: Show ConnectWise API result
      debug:
        msg: "{{ (cw_create.json if (cw_lookup.json | length == 0) else cw_update.json) }}"
