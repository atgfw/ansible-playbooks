---
# Playbook: sync_connectwise_minimal.yml
# Purpose: Create or update a ConnectWise Manage "Configuration" record
#          for each host with all relevant fields included.

- name: Sync host facts to ConnectWise Manage configuration
  hosts: all
  gather_facts: yes

  vars:
    cw_base_url: "https://{{ CW_SITE | default('na.myconnectwise.net') }}/v4_6_release/apis/3.0"

    # Authentication via environment variables (required)
    cw_company_id:   "{{ lookup('env', 'CW_COMPANY_ID') }}"
    cw_public_key:   "{{ lookup('env', 'CW_PUBLIC_KEY') }}"
    cw_private_key:  "{{ lookup('env', 'CW_PRIVATE_KEY') }}"
    cw_client_id:    "{{ lookup('env', 'CW_CLIENT_ID') }}"

    # Configuration parameters
    cw_config_type_id:            146         # Numeric ID of CW Configuration Type
    cw_config_type_name:          "Droplet"  # Name of the CW Configuration Type
    cw_active_status_id:          2           # Numeric ID for active status
    cw_inactive_status_id:        3           # Numeric ID for inactive status
    cw_status_name:               "Active"   # Default status name
    cw_vendor_id:                 20945       # DigitalOcean Vendor ID

    # Question IDs for DO-specific fields
    cw_q_do_region_id:             1370
    cw_q_size_slug_id:             1371
    cw_q_do_tags_id:               1372
    cw_q_private_ip_id:            1373
    cw_q_price_monthly_id:         1375
    cw_q_networking_throughput_id: 1376
    cw_q_hostname_id:              1377
    cw_q_fqdn_id:                  1378
    cw_q_link_id:                  1379  # QuestionId for DO GUI link
    cw_q_backups_id:               1380  # QuestionId for backups

  tasks:
    - name: Validate ConnectWise credentials
      fail:
        msg: "Missing required ConnectWise environment variables"
      when:
        - cw_company_id == ''
        - cw_public_key == ''
        - cw_private_key == ''
        - cw_client_id == ''

    - name: Extract Company identifier from Droplet tags
      set_fact:
        cw_company_ident: >-
          {{ do_tags
             | default([])
             | select('match','^company:')
             | map('regex_replace','^company:','')
             | map('replace','_',' ')
             | list
             | first
             | default('')
          }}
          }}

    - name: Fail if no company tag
      fail:
        msg: "Droplet is missing a 'company:<IDENT>' tag."
      when: cw_company_ident == ''

    - name: Compute common facts
      set_fact:
        cw_device_uuid:   "{{ do_id | default(ansible_product_uuid | default(inventory_hostname)) }}"
        cw_auth_header:   >-
          Basic {{ (cw_company_id ~ '+' ~ cw_public_key ~ ':' ~ cw_private_key) | b64encode }}

    - name: Lookup ConnectWise Company
      uri:
        url:         "{{ cw_base_url }}/company/companies?conditions=identifier='{{ cw_company_ident }}'"
        method:      GET
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId:     "{{ cw_client_id }}"
          Accept:       "application/json"
        return_content: yes
        validate_certs: yes
      register: cw_company_lookup

    - name: Fail if Company not found
      fail:
        msg: "Company identifier '{{ cw_company_ident }}' not found in ConnectWise."
      when: cw_company_lookup.json | length == 0

    - name: Set ConnectWise Company ID
      set_fact:
        cw_company_id_num: "{{ cw_company_lookup.json[0].id }}"

    - name: Search for existing Configuration
      uri:
        url:         "{{ cw_base_url }}/company/configurations?conditions=deviceIdentifier='{{ cw_device_uuid }}'"
        method:      GET
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId:     "{{ cw_client_id }}"
          Accept:       "application/json"
        return_content: yes
        validate_certs: yes
      register: cw_search

    - name: Build full payload
      set_fact:
        cw_payload:
          name:             "{{ inventory_hostname }}"
          deviceIdentifier: "{{ cw_device_uuid }}"
          type:
            id:   "{{ cw_config_type_id }}"
            name: "{{ cw_config_type_name }}"
          status:
            id:   "{{ (do_status | lower) in ['offline','archive'] and cw_inactive_status_id or cw_active_status_id }}"
            name: "{{ (do_status | lower) in ['offline','archive'] and 'Inactive' or cw_status_name }}"
          company:
            id:   "{{ cw_company_id_num }}"
          vendor:
            id:   "{{ cw_vendor_id }}"
          ram:              "{{ do_memory | default('') }}"
          localHardDrives: >-
            {%- for disk in do_size.disk_info | default([]) -%}
            {{ disk.type }}: {{ disk.size.amount }} {{ disk.size.unit }}{{ ", " if not loop.last else "" }}
            {%- endfor %}
          installationDate: "{{ do_created_at }}"
          osType:           "{{ ansible_lsb.description | default('') }}"
          osInfo:           "{{ do_image.description | default('') }}"
          modelNumber:      "{{ do_size.slug | default('') }}"
          serialNumber:     "{{ do_id | default('') }}"
          cpuSpeed:         "{{ do_vcpus | default(0) }} cores"
          ipAddress:        "{{ ansible_host }}"
          defaultGateway:   "{{ (do_networks.v4
                                  | selectattr('type','equalto','public')
                                  | map(attribute='gateway')
                                  | list | first)
                                | default('') }}"
          questions:
            - questionId: "{{ cw_q_do_region_id }}"
              answer:     "{{ do_region.slug | default('') }}"
            - questionId: "{{ cw_q_size_slug_id }}"
              answer:     "{{ do_size.slug | default('') }}"
            - questionId: "{{ cw_q_do_tags_id }}"
              answer:     "{{ do_tags | join(', ') if do_tags is defined else '' }}"
            - questionId: "{{ cw_q_private_ip_id }}"
              answer:     "{{ (do_networks.v4
                                  | selectattr('type','equalto','private')
                                  | map(attribute='ip_address')
                                  | list | first)
                                | default('') }}"
            - questionId: "{{ cw_q_price_monthly_id }}"
              answer:     "{{ do_size.price_monthly | default('') }}"
            - questionId: "{{ cw_q_networking_throughput_id }}"
              answer:     "{{ do_size.networking_throughput | default('') }}"
            - questionId: "{{ cw_q_hostname_id }}"
              answer:     "{{ ansible_hostname | default('') }}"
            - questionId: "{{ cw_q_fqdn_id }}"
              answer:     "{{ ansible_fqdn | default('') }}"
            - questionId: "{{ cw_q_link_id }}"
              answer:     "https://cloud.digitalocean.com/droplets/{{ do_id }}/"
            - questionId: "{{ cw_q_backups_id }}"
              answer:     "{{ 'True' if 'backups' in do_features else 'False' }}"

    - name: Create Configuration if absent
      when: cw_search.json | length == 0
      uri:
        url:           "{{ cw_base_url }}/company/configurations"
        method:        POST
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId:      "{{ cw_client_id }}"
          Content-Type:  "application/json"
        body:           "{{ cw_payload }}"
        body_format:    json
        status_code:    201
        return_content: yes
        validate_certs: yes
      register:      cw_result

    - name: Update Configuration if present
      when: cw_search.json | length > 0
      uri:
        url:           "{{ cw_base_url }}/company/configurations/{{ cw_search.json[0].id }}"
        method:        PUT
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId:      "{{ cw_client_id }}"
          Content-Type:  "application/json"
        body:           "{{ cw_payload }}"
        body_format:    json
        status_code:    200
        return_content: yes
        validate_certs: yes
      register:      cw_result

    - name: Show ConnectWise response
      debug:
        var: cw_result.json
