---
# Playbook: sync_connectwise_minimal.yml
# Purpose: Create or update a ConnectWise Manage "Configuration" record
#          for each host with minimal fields.
# How it works:
#   1. Auth via env vars
#   2. Lookup Company by tag identifier
#   3. Search by deviceIdentifier
#   4. Build full payload (cw_payload)
#   5. POST if absent, PUT if present

- name: Sync host facts to ConnectWise Manage configuration
  hosts: all
  gather_facts: yes

  vars:
    cw_base_url: "https://api-na.myconnectwise.net/v4_6_release/apis/3.0"

    # Auth (env vars)
    cw_company_id:   "{{ lookup('env','CW_COMPANY_ID') }}"
    cw_public_key:   "{{ lookup('env','CW_PUBLIC_KEY') }}"
    cw_private_key:  "{{ lookup('env','CW_PRIVATE_KEY') }}"
    cw_client_id:    "{{ lookup('env','CW_CLIENT_ID') }}"

    # Configuration Type (name only)
    cw_config_type_name: "Droplet"
    cw_status_id:        5        5

  tasks:

    - name: Validate CW credentials
      fail:
        msg: "One or more ConnectWise credentials are missing."
      when: cw_company_id=='' or cw_public_key=='' or cw_private_key=='' or cw_client_id==''

    - name: Extract Company identifier from tag
      set_fact:
        cw_company_ident: >-
          {{ (do_tags | default([]) | select('match','^company:') | map('regex_replace','^company:','') | list | first | default('')) }}

    - name: Fail if no company tag
      fail:
        msg: "Droplet lacks 'company:<IDENT>' tag."
      when: cw_company_ident == ''

    - name: Compute helper facts
      set_fact:
        cw_device_uuid: "{{ do_id | default(ansible_product_uuid | default(inventory_hostname)) }}"
        cw_auth_header: "Basic {{ (cw_company_id ~ '+' ~ cw_public_key ~ ':' ~ cw_private_key)|b64encode }}"

    - name: Lookup ConnectWise Company by identifier
      uri:
        url: "{{ cw_base_url }}/company/companies?conditions=identifier='{{ cw_company_ident }}'"
        method: GET
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Accept: "application/json"
        return_content: yes
        validate_certs: yes
      register: cw_company

    - name: Fail if Company not found
      fail:
        msg: "Company identifier '{{ cw_company_ident }}' not found."
      when: cw_company.json | length == 0

    - name: Set Company ID
      set_fact:
        cw_company_id_num: "{{ cw_company.json[0].id }}"

    - name: Lookup Configuration Type by name
      uri:
        url: "{{ cw_base_url }}/company/configurationTypes?conditions=name='{{ cw_config_type_name }}'"
        method: GET
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Accept: "application/json"
        return_content: yes
        validate_certs: yes
      register: cw_type

    - name: Fail if configuration type not found
      fail:
        msg: "Configuration Type '{{ cw_config_type_name }}' not found in ConnectWise."
      when: cw_type.json | length == 0

    - name: Set Configuration Type ID
      set_fact:
        cw_config_type_id: "{{ cw_type.json[0].id }}"

    - name: Search existing configuration by deviceIdentifier by deviceIdentifier
      uri:
        url: "{{ cw_base_url }}/company/configurations?conditions=deviceIdentifier='{{ cw_device_uuid }}'"
        method: GET
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Accept: "application/json"
        return_content: yes
        validate_certs: yes
      register: cw_search

    - name: Build full configuration payload
      set_fact:
        cw_payload:
          name: "{{ inventory_hostname }}"
          deviceIdentifier: "{{ cw_device_uuid }}"
          type:
            id:   "{{ cw_config_type_id }}"
            name: "{{ cw_config_type_name }}"
          status:
            id: "{{ cw_status_id }}"
          company:
            id: "{{ cw_company_id_num }}"
          ipAddress: "{{ ansible_default_ipv4.address | default('') }}"
          notes: >-
            Auto-generated by Ansible at {{ ansible_date_time.iso8601 }}
          customFields:
            - caption: "Droplet ID"
              value: "{{ do_id | default('') }}"
            - caption: "DO Region"
              value: "{{ do_region.slug | default('') }}"
            - caption: "DO Size"
              value: "{{ do_size.slug | default('') }}"
            - caption: "DO Tags"
              value: "{{ do_tags | join(', ') if do_tags is defined else '' }}"
            - caption: "Private IP"
              value: >-
                {{ (do_networks.v4 | selectattr('type','equalto','private') | map(attribute='ip_address') | list | first) | default('') }}

    - name: Create configuration when absent
      when: cw_search.json | length == 0
      uri:
        url: "{{ cw_base_url }}/company/configurations"
        method: POST
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Content-Type: "application/json"
        body: "{{ cw_payload }}"
        body_format: json
        status_code: 201
        return_content: yes
        validate_certs: yes
      register: cw_result

    - name: Update configuration when present
      when: cw_search.json | length > 0
      uri:
        url: "{{ cw_base_url }}/company/configurations/{{ cw_search.json[0].id }}"
        method: PUT
        headers:
          Authorization: "{{ cw_auth_header }}"
          clientId: "{{ cw_client_id }}"
          Content-Type: "application/json"
        body: "{{ cw_payload }}"
        body_format: json
        status_code: 200
        return_content: yes
        validate_certs: yes
      register: cw_result

    - name: Show CW response
      debug:
        var: cw_result.json
