- name: Add port 22 rule only to firewalls missing it
  hosts: localhost
  gather_facts: false
  collections:
    - community.digitalocean

  vars:
    do_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
    ssh_rule:
      protocol: tcp
      port_range: "22"
      source_addresses:
        - '161.35.133.150/32'
        - '208.103.13.38/30'
        - '173.165.98.241/29'
        - '138.197.62.57/32'

  tasks:

    - name: Get all DigitalOcean firewalls
      community.digitalocean.digital_ocean_firewall_info:
        oauth_token: "{{ do_token }}"
      register: firewalls_info

    - name: Initialize list of firewalls missing SSH
      set_fact:
        firewalls_missing_ssh: []

    - name: Filter firewalls that do not have port 22 open
      set_fact:
        firewalls_missing_ssh: "{{ firewalls_missing_ssh + [item] }}"
      loop: "{{ firewalls_info.data }}"
      when: >
        item.inbound_rules | selectattr('protocol', 'equalto', 'tcp') |
        selectattr('ports', 'defined') |
        selectattr('ports', 'search', '(^22$|^22-[0-9]+$|^[0-9]+-22$|^[0-9]+-[0-9]+$)') |
        list | length == 0
      loop_control:
        label: "{{ item.name }}"

    - name: Initialize normalized firewall list
      set_fact:
        normalized_firewalls: []

    - name: Normalize and append SSH rule
      set_fact:
        normalized_firewalls: "{{ normalized_firewalls + [ {
          'name': item.name,
          'droplet_ids': item.droplet_ids,
          'inbound_rules': (
            item.inbound_rules | map('extract', ['protocol', 'ports', 'sources']) | map('community_do_normalize_inbound') | list
          ) + [ssh_rule],
          'outbound_rules': (
            item.outbound_rules | map('extract', ['protocol', 'ports', 'destinations']) | map('community_do_normalize_outbound') | list
          )
        } ] }}"
      loop: "{{ firewalls_missing_ssh }}"
      loop_control:
        label: "{{ item.name }}"
      vars:
        community_do_normalize_inbound: >-
          {{
            lambda r: {
              'protocol': r.protocol,
              'port_range': r.ports,
              'source_addresses': r.sources.addresses if r.sources is defined and r.sources.addresses is defined else [],
              'source_droplet_ids': r.sources.droplet_ids if r.sources is defined and r.sources.droplet_ids is defined else []
            }
          }}
        community_do_normalize_outbound: >-
          {{
            lambda r: {
              'protocol': r.protocol,
              'port_range': r.ports,
              'destination_addresses': r.destinations.addresses if r.destinations is defined and r.destinations.addresses is defined else [],
              'destination_droplet_ids': r.destinations.droplet_ids if r.destinations is defined and r.destinations.droplet_ids is defined else []
            }
          }}

    - name: Apply updated firewall config
      community.digitalocean.digital_ocean_firewall:
        oauth_token: "{{ do_token }}"
        state: present
        name: "{{ item.name }}"
        inbound_rules: "{{ item.inbound_rules }}"
        outbound_rules: "{{ item.outbound_rules }}"
        droplet_ids: "{{ item.droplet_ids }}"
      loop: "{{ normalized_firewalls }}"
      loop_control:
        label: "{{ item.name }}"

