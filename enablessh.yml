- name: Add port 22 rule only to firewalls missing it
  hosts: localhost
  gather_facts: false
  collections:
    - community.digitalocean

  vars:
    do_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
    ssh_rule:
      protocol: tcp
      port_range: "22"
      source_addresses:
        - '161.35.133.150/32'
        - '208.103.13.38/30'
        - '173.165.98.241/29'
        - '138.197.62.57/32'

  tasks:

    - name: Get all DigitalOcean firewalls
      community.digitalocean.digital_ocean_firewall_info:
        oauth_token: "{{ do_token }}"
      register: firewalls_info

    - name: Initialize list of firewalls missing SSH
      set_fact:
        firewalls_missing_ssh: []

    - name: Filter firewalls that do not have port 22 open
      set_fact:
        firewalls_missing_ssh: "{{ firewalls_missing_ssh + [item] }}"
      loop: "{{ firewalls_info.data }}"
      when: >
        item.inbound_rules | selectattr('protocol', 'equalto', 'tcp') |
        selectattr('ports', 'defined') |
        selectattr('ports', 'search', '(^22$|^22-[0-9]+$|^[0-9]+-22$|^[0-9]+-[0-9]+$)') |
        list | length == 0
      loop_control:
        label: "{{ item.name }}"

    - name: Initialize normalized firewall list
      set_fact:
        normalized_firewalls: []

    - name: Normalize and append SSH rule
      vars:
        new_inbound: []
        new_outbound: []
      block:
        - name: Normalize inbound rules
          set_fact:
            new_inbound: >-
              {{
                item.inbound_rules | map('extract', ['protocol', 'ports', 'sources']) | map('community_do_normalize_inbound') | list
              }}
          vars:
            community_do_normalize_inbound: >-
              {{
                lambda rule: {
                  'protocol': rule.protocol,
                  'port_range': rule.ports,
                  'source_addresses': rule.sources.addresses if (rule.sources.addresses is defined) else [],
                  'source_droplet_ids': rule.sources.droplet_ids if (rule.sources.droplet_ids is defined) else []
                }
              }}

        - name: Normalize outbound rules
          set_fact:
            new_outbound: >-
              {{
                item.outbound_rules | map('extract', ['protocol', 'ports', 'destinations']) | map('community_do_normalize_outbound') | list
              }}
          vars:
            community_do_normalize_outbound: >-
              {{
                lambda rule: {
                  'protocol': rule.protocol,
                  'port_range': rule.ports,
                  'destination_addresses': rule.destinations.addresses if (rule.destinations.addresses is defined) else [],
                  'destination_droplet_ids': rule.destinations.droplet_ids if (rule.destinations.droplet_ids is defined) else []
                }
              }}

        - name: Add to normalized list
          set_fact:
            normalized_firewalls: "{{ normalized_firewalls + [ {
              'name': item.name,
              'droplet_ids': item.droplet_ids,
              'inbound_rules': new_inbound + [ssh_rule],
              'outbound_rules': new_outbound
            } ] }}"
      loop: "{{ firewalls_missing_ssh }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Apply updated firewall config
      community.digitalocean.digital_ocean_firewall:
        oauth_token: "{{ do_token }}"
        state: present
        name: "{{ item.name }}"
        inbound_rules: "{{ item.inbound_rules }}"
        outbound_rules: "{{ item.outbound_rules }}"
        droplet_ids: "{{ item.droplet_ids }}"
      loop: "{{ normalized_firewalls }}"
      loop_control:
        label: "{{ item.name }}"
