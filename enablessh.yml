---
# Playbook Name: tag_3CX_firewall_droplets.yml
# Purpose      : Ensure every Droplet protected by a “3CX…” firewall
#                (whether attached directly or by tag) has the tag “atgssh”.
#
# Prerequisites
#   • community.digitalocean collection
#   • Python ‘requests’ library
#   • export DO_API_TOKEN="your‑token‑here"

- name: Tag Droplets behind “3CX” firewalls
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    firewall_prefix: "3CX"
    tag_to_add: "atgssh"
    do_api_token: "{{ lookup('env', 'DO_API_TOKEN') }}"

  tasks:
  # -----------------------------------------------------------------------
  # Pre‑flight
  # -----------------------------------------------------------------------
  - name: Abort if API token is missing
    ansible.builtin.fail:
      msg: >
        DigitalOcean API token not found.
        Export DO_API_TOKEN before running:
          export DO_API_TOKEN="<your‑token>"
    when: do_api_token | default('') | length == 0
    run_once: true

  # -----------------------------------------------------------------------
  # Gather account data
  # -----------------------------------------------------------------------
  - name: Get firewalls
    community.digitalocean.digital_ocean_firewall_info:
      oauth_token: "{{ do_api_token }}"
    register: firewall_data
    changed_when: false
    run_once: true

  - name: Get all droplets
    community.digitalocean.digital_ocean_droplet_info:
      oauth_token: "{{ do_api_token }}"
    register: droplet_data
    changed_when: false
    run_once: true

  # -----------------------------------------------------------------------
  # Build helper collections
  # -----------------------------------------------------------------------
  - name: Keep only firewalls whose name starts with the prefix
    ansible.builtin.set_fact:
      matched_firewalls: >-
        {{
          firewall_data.data
          | selectattr('name', 'match', '^' ~ firewall_prefix ~ '.*')
          | list
        }}
    run_once: true

  - name: Droplet IDs attached directly to those firewalls
    ansible.builtin.set_fact:
      direct_ids: "{{ matched_firewalls | map(attribute='droplet_ids') | sum(start=[]) | unique }}"
    run_once: true

  - name: Tags used by those firewalls
    ansible.builtin.set_fact:
      firewall_tags: "{{ matched_firewalls | map(attribute='tags') | sum(start=[]) | unique }}"
    run_once: true

  # -----------------------------------------------------------------------
  # Resolve tags → Droplet IDs
  # -----------------------------------------------------------------------
  - name: Start the final list with the direct‑attachment IDs
    ansible.builtin.set_fact:
      target_droplet_ids: "{{ direct_ids }}"
    run_once: true

  - name: Add Droplet IDs for each firewall tag
    vars:
      query: "[?contains(tags, `{{ item }}`)].id"
      ids_for_tag: "{{ (droplet_data.data | json_query(query)) | default([]) }}"
    ansible.builtin.set_fact:
      target_droplet_ids: "{{ (target_droplet_ids + ids_for_tag) | unique }}"
    loop: "{{ firewall_tags }}"
    loop_control:
      label: "{{ item }}"
    when: firewall_tags | length > 0
    run_once: true

  # -----------------------------------------------------------------------
  # Apply the tag (module will also create the tag object if missing)
  # -----------------------------------------------------------------------
  - name: Apply '{{ tag_to_add }}' tag to each target Droplet
    community.digitalocean.digital_ocean_tag:
      oauth_token: "{{ do_api_token }}"
      name: "{{ tag_to_add }}"
      resource_id: "{{ item | string }}"
      resource_type: droplet
      state: present
    loop: "{{ target_droplet_ids }}"
    when: target_droplet_ids | length > 0

  # -----------------------------------------------------------------------
  # Report
  # -----------------------------------------------------------------------
  - name: Summary
    ansible.builtin.debug:
      msg: >-
        Processed {{ target_droplet_ids | length }} Droplet(s):
        {{ target_droplet_ids | join(', ') | default('none') }}.
        Tag '{{ tag_to_add }}' ensured on all of them.
    run_once: true
