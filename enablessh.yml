---
# Playbook Name: tag_3CX_firewall_droplets.yml
# Description : Tag every Droplet attached to a DigitalOcean firewall
#               whose name begins with “3CX”; the tag applied is “atgssh”.
#
# Prerequisites
#   • Ansible (core ≥2.14)
#   • community.digitalocean collection
#     (ansible-galaxy collection install community.digitalocean)
#   • requests Python library
#   • Environment variable DO_API_TOKEN set with a valid DO API token
#
# Usage
#   export DO_API_TOKEN="your‑token‑value"
#   ansible-playbook tag_3CX_firewall_droplets.yml

- name: Tag Droplets behind “3CX” firewalls
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    firewall_prefix: "3CX"   # firewalls whose names start with this string
    tag_to_add: "atgssh"     # tag to apply to the Droplets
    do_api_token: "{{ lookup('env', 'DO_API_TOKEN') }}"

  tasks:
  # ---------------------------------------------------------------------------
  # Pre‑flight
  # ---------------------------------------------------------------------------
  - name: Abort if DigitalOcean API token is missing
    ansible.builtin.fail:
      msg: |
        DigitalOcean API token not found.  Export DO_API_TOKEN before running:
          export DO_API_TOKEN="<your‑token>"
    when: do_api_token | default('') | length == 0
    run_once: true

  # ---------------------------------------------------------------------------
  # Gather firewall information
  # ---------------------------------------------------------------------------
  - name: Retrieve all DigitalOcean firewalls
    community.digitalocean.digital_ocean_firewall_info:
      oauth_token: "{{ do_api_token }}"
    register: firewall_data
    changed_when: false
    run_once: true

  # ---------------------------------------------------------------------------
  # Build list of target Droplet IDs
  # ---------------------------------------------------------------------------
  - name: Collect Droplet IDs from firewalls whose name matches the prefix
    ansible.builtin.set_fact:
      target_droplet_ids: >-
        {{
          (firewall_data.data | default([]))
          | selectattr('name', 'match', '^' + firewall_prefix + '.*')
          | map(attribute='droplet_ids')
          | sum(start=[])
          | unique
        }}
    run_once: true

  # ---------------------------------------------------------------------------
  # Tag each Droplet (module is idempotent and will create tag object if needed)
  # ---------------------------------------------------------------------------
  - name: Apply '{{ tag_to_add }}' tag to each target Droplet
    community.digitalocean.digital_ocean_tag:
      oauth_token: "{{ do_api_token }}"
      name: "{{ tag_to_add }}"
      resource_id: "{{ item | string }}"   # ensure ID is passed as a string
      resource_type: droplet
      state: present
    loop: "{{ target_droplet_ids }}"
    when: target_droplet_ids | length > 0

  # ---------------------------------------------------------------------------
  # Report
  # ---------------------------------------------------------------------------
  - name: Summary
    ansible.builtin.debug:
      msg: >-
        Processed {{ target_droplet_ids | length }} Droplet(s):
        {{ target_droplet_ids | join(', ') | default('none') }}.
        Tag '{{ tag_to_add }}' ensured on all of them.
    run_once: true
