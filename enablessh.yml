- name: Add port 22 rule only to firewalls missing it
  hosts: localhost
  gather_facts: false
  collections:
    - community.digitalocean

  vars:
    do_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
    ssh_rule:
      protocol: tcp
      port_range: "22"
      source_addresses:
        - '161.35.133.150/32'
        - '208.103.13.38/30'
        - '173.165.98.241/29'
        - '138.197.62.57/32'

  tasks:

    - name: Get all DigitalOcean firewalls
      community.digitalocean.digital_ocean_firewall_info:
        oauth_token: "{{ do_token }}"
      register: firewalls_info

    - name: Filter firewalls that do not have port 22 open
      set_fact:
        firewalls_missing_ssh: >-
          {{
            firewalls_info.data | rejectattr('inbound_rules', 'none') | selectattr('inbound_rules', 'defined') | select(
              'match', '^.*$'
            ) | select(
              lambda fw: (
                fw.inbound_rules | selectattr('protocol', 'equalto', 'tcp') |
                selectattr('ports', 'defined') |
                selectattr('ports', 'search', '(^22$|^22-[0-9]+$|^[0-9]+-22$|^[0-9]+-[0-9]+$)') | list | length == 0
              )
            ) | list
          }}

    - name: Initialize normalized firewall list
      set_fact:
        normalized_firewalls: []

    - name: Normalize inbound rules
      set_fact:
        new_inbound: >-
          {% set result = [] %}
          {% for rule in item.inbound_rules %}
            {% set src = rule.sources if rule.sources is defined else {} %}
            {% set r = {
              'protocol': rule.protocol,
              'port_range': rule.ports,
              'source_addresses': src.addresses if src.addresses is defined else [],
              'source_droplet_ids': src.droplet_ids if src.droplet_ids is defined else []
            } %}
            {% set _ = result.append(r) %}
          {% endfor %}
          {{ result + [ssh_rule] }}
      loop: "{{ firewalls_missing_ssh }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Normalize outbound rules
      set_fact:
        new_outbound: >-
          {% set result = [] %}
          {% for rule in item.outbound_rules %}
            {% set dst = rule.destinations if rule.destinations is defined else {} %}
            {% set r = {
              'protocol': rule.protocol,
              'port_range': rule.ports,
              'destination_addresses': dst.addresses if dst.addresses is defined else [],
              'destination_droplet_ids': dst.droplet_ids if dst.droplet_ids is defined else []
            } %}
            {% set _ = result.append(r) %}
          {% endfor %}
          {{ result }}
      loop: "{{ firewalls_missing_ssh }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Append normalized firewall to update list
      set_fact:
        normalized_firewalls: "{{ normalized_firewalls + [ {
          'name': item.name,
          'droplet_ids': item.droplet_ids,
          'inbound_rules': new_inbound,
          'outbound_rules': new_outbound
        } ] }}"
      loop: "{{ firewalls_missing_ssh }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Apply updated firewall config
      community.digitalocean.digital_ocean_firewall:
        oauth_token: "{{ do_token }}"
        state: present
        name: "{{ item.name }}"
        inbound_rules: "{{ item.inbound_rules }}"
        outbound_rules: "{{ item.outbound_rules }}"
        droplet_ids: "{{ item.droplet_ids }}"
      loop: "{{ normalized_firewalls }}"
      loop_control:
        label: "{{ item.name }}"


