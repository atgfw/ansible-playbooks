---
# Convert inbound rules to required format
- name: Process inbound rules
  set_fact:
    inbound_rules_normalized: []

- name: Convert each inbound rule
  set_fact:
    inbound_rules_normalized: >-
      {{ inbound_rules_normalized + [{
        'protocol': item.protocol,
        'port_range': item.ports,
        'source_addresses': item.sources.addresses if (item.sources is defined and item.sources.addresses is defined) else [],
        'source_droplet_ids': item.sources.droplet_ids if (item.sources is defined and item.sources.droplet_ids is defined) else []
      }] }}
  loop: "{{ firewall.inbound_rules }}"
  loop_control:
    label: "{{ item.protocol }}-{{ item.ports }}"

# Add SSH rule to normalized inbound rules
- name: Add SSH rule
  set_fact:
    inbound_rules_normalized: "{{ inbound_rules_normalized + [ssh_rule] }}"

# Convert outbound rules to required format
- name: Process outbound rules
  set_fact:
    outbound_rules_normalized: []

- name: Convert each outbound rule
  set_fact:
    outbound_rules_normalized: >-
      {{ outbound_rules_normalized + [{
        'protocol': item.protocol,
        'port_range': item.ports,
        'destination_addresses': item.destinations.addresses if (item.destinations is defined and item.destinations.addresses is defined) else [],
        'destination_droplet_ids': item.destinations.droplet_ids if (item.destinations is defined and item.destinations.droplet_ids is defined) else []
      }] }}
  loop: "{{ firewall.outbound_rules }}"
  loop_control:
    label: "{{ item.protocol }}-{{ item.ports }}"

# Apply the updated firewall
- name: Apply updated firewall with SSH rule
  community.digitalocean.digital_ocean_firewall:
    oauth_token: "{{ do_token }}"
    state: present
    name: "{{ firewall.name }}"
    inbound_rules: "{{ inbound_rules_normalized }}"
    outbound_rules: "{{ outbound_rules_normalized }}"
    droplet_ids: "{{ firewall.droplet_ids }}"
  register: firewall_result

- name: Debug firewall result
  debug:
    var: firewall_result
    verbosity: 1
